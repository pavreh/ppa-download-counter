#!/bin/bash

# Help
# https://launchpad.net/+apidoc/devel.html#binary_package_publishing_history


title="PPA Download Counter"
package="ppa-download-counter"
version="0.1.0 UNRELEASED"

# Files
download_statistics=$HOME/.config/$package/download_statistics
configfile=$HOME/.config/$package/ppa-download-counter.cfg
icon=$HOME/Git/$package/share/icons/hicolor/48x48/apps/if_4_1668043.png

ifs=$IFS

source "../share/ppa-download-counter/bash-ini-parser"


##############################################################################
#    Gettext
##############################################################################

. gettext.sh

TEXTDOMAIN=$package
export TEXTDOMAIN

TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR


##############################################################################
#    FUNCTIONS
##############################################################################

get_total_downloads()
{
all_data=""

# Progressbar
length_ppas=${#all_ppas[@]}
echo $length_ppas
length_distros=${#all_distros[@]}
echo $length_distros
length_architectures=${#all_architectures[@]}
echo $length_architectures
progress_part=$((100/(($length_ppas)*($length_architectures)*($length_distros))))
echo $progress_part
progress=$((0-$progress_part))

# Go through PPAs
p=0
while [ "$p" -lt "$length_ppas" ];
do
    ppa_name=${all_ppas[$p]}
    p=$(($p+1))
    
    # Go through Architectures
    a=0
    while [ "$a" -lt "$length_architectures" ];
    do
        ppa_architecture=${all_architectures[$a]}
        a=$(($a+1))
    
        # Go through Distros
        d=0
        while [ "$d" -lt "$length_distros" ];
        do
            ppa_serie=${all_distros[$d]}
            d=$(($d+1))

            # Progressbar
            progress=$(($progress+$progress_part))
            echo $progress
            
        
            # Get pure data
            # TODO stop when downloading error
            # TODO check internet connection
            pure_data=$(wget "https://api.launchpad.net/1.0/~$ppa_user/+archive/ubuntu/$ppa_name?ws.op=getPublishedBinaries&distro_arch_series=https://api.launchpad.net/1.0/ubuntu/$ppa_serie/$ppa_architecture&status=$binary_status&exact_match=false&ordered=false&binary_name=" -q -O -)

            # get description of binaries
            description_binaries=$(echo "$pure_data" | 
                                   jq . | 
                                   grep display_name | 
                                   sed 's/ *"display_name"\: "//g' | 
                                   sed 's/",//g' |
                                   sed "s/^/$ppa_name /" )
    
            # get binary ids
            ids_binaries=$(echo "$pure_data" | 
                           jq . | 
                           grep self_link | 
                           sed 's/ *"self_link".*\///g' | 
                           sed 's/",//g' )
    
            # get url adresses
            adresses=""
            while IFS= read -r line; 
            do
                adresses="$adresses
https://api.launchpad.net/1.0/~$ppa_user/+archive/ubuntu/$ppa_name/+binarypub/$line?ws.op=getDownloadCount"
            done <<< "$ids_binaries"
            adresses=$(echo "$adresses" |
                       sed 1d)
            
            # Progressbar
            length_adresses=$(echo "$adresses" |
                              wc -l)
            progress_part2=$(($progress_part/$length_adresses))
            progress2=$progress
    
            # Get Download count
            download_count=""
            while IFS= read -r line;
            do
                # TODO stop when downloading error / one address fail
                count=$(wget $line -q -O -)
                download_count="$download_count
$count"
            # Progressbar
            progress2=$(($progress2+$progress_part2))
            echo $progress2
            
            done <<< "$adresses"
            download_count=$(echo "$download_count" | 
                             sed 1d )

            # merge data
            merged_data=$(paste \
                          <(echo "$description_binaries") \
                          <(echo "$download_count"))
            all_data="$all_data
$merged_data"
        done
    done
done

all_data=$(echo "$all_data" |
           sed 's/in //g' |
           tee $download_statistics )

# Progressbar
echo 100
}


set_config_file()
{
config_file='# PPA Download Counter Settings


[settings]

# Replace "joe" by required user name. Only one user name is allowed.
ppa_user=joe

# Set one or more PPAs divided by whitespace.
# E.g. all_ppas=ppa1 ppa2 ppa3
# Default all_ppas=ppa
all_ppas=ppa

# Set one or more architectures divided by whitespace.
# Default all_architectures=i386 amd64
all_architectures=i386 amd64

# Set one or more distributions name divided by whitespace.
# Default all_distros=trusty xenial artful bionic cosmic
all_distros=trusty xenial artful bionic cosmic

# Set one packages status.
# Posible values: 
#    Pending
#    Published
#    Superseded
#    Deleted
#    Obsolete
# Default binary_status=Published
binary_status=Published
'

if test -e "$configfile"
then
    gedit --wait "$configfile"
else
    echo "$config_file" > "$configfile" 
    gedit --wait "$configfile"
fi
}


check_config_file()
{
# Create config folder and statistics file
if ! test -e $download_statistics
then
                   mkdir $HOME/.config/$package
                   touch $download_statistics
fi
}


##############################################################################
#    PROGRAM
##############################################################################


#    PARAMETERS
##############################################################################

while [ $# -gt 0 ]
do
    case "$1" in
        --version | -v )
            echo "$title version $version"
            exit
            ;;

        --help | -h )
            echo "$title - "
            echo " "
            echo "usage: $title [option]"
            echo " "
            echo "options:"
            echo "  -h, --help                show this help"
            echo "  -v, --version             print version number"
            exit
            ;;            
    esac
    shift
done


##############################################################################

run=1

check_config_file
    # TODO gettext
    button1_text="Settings"
    ok_text="Refresh"

while [ "$run" = "1" ]
do
    cfg_parser "$configfile"
    cfg_section_settings
    IFS=$ifs
    # TODO arch = unspecified dostro = unspecified
    all_data=$(cat $download_statistics |
               awk '!a[$1$2$3$6]++' )
                            
    yad --list \
        --title="$title" \
        --window-icon=$icon \
        --button="Close":0 \
        --button=$button1_text:1 \
        --button=$ok_text:2 \
        --width=600 \
        --height=400 \
        --column="PPA" \
        --column="Package" \
        --column="Version" \
        --column="Distro" \
        --column="Arch" \
        --column="Downloads":NUM \
        $all_data

    status=$?
    case $status in
    252) exit ;;
    0) exit ;;
    1) set_config_file ;;
    2) get_total_downloads | 
       yad --progress \
               --title="$title" \
               --window-icon=$icon \
               --width=300 \
               --text "Checking data..." \
               --auto-close ;;
    esac
done
