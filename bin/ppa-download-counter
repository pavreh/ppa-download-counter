#!/bin/bash

#    PPA Download Counter
#    Copyright (C) 2018  Pavel Řehák
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Help
# https://launchpad.net/+apidoc/devel.html#binary_package_publishing_history


title="PPA Download Counter"
package="ppa-download-counter"
version="1.0.0 UNRELEASED"

# Files
download_statistics=$HOME/.config/$package/download_statistics
configfile=$HOME/.config/$package/ppa-download-counter.ini
icon="../share/icons/hicolor/48x48/apps/$package.png"

# Needed for yad
ifs=$IFS


##############################################################################
#    Gettext
##############################################################################

. gettext.sh

TEXTDOMAIN=$package
export TEXTDOMAIN

TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR


##############################################################################
#    FUNCTIONS
##############################################################################

get_total_downloads()
{
all_data=""

# Progressbar
length_ppas=${#all_ppas[@]}
length_distros=${#all_distros[@]}
length_architectures=${#all_architectures[@]}
progress_part=$((100/(($length_ppas)*($length_architectures)*($length_distros))))
echo $progress_part
progress=$((0-$progress_part))

# Go through PPAs
p=0
while [ "$p" -lt "$length_ppas" ];
do
    ppa_name=${all_ppas[$p]}
    p=$(($p+1))
    
    # Go through Architectures
    a=0
    while [ "$a" -lt "$length_architectures" ];
    do
        ppa_architecture=${all_architectures[$a]}
        a=$(($a+1))
    
        # Go through Distros
        d=0
        while [ "$d" -lt "$length_distros" ];
        do
            ppa_serie=${all_distros[$d]}
            d=$(($d+1))

            # Progressbar
            progress=$(($progress+$progress_part))
            echo $progress
            
        
            # Get pure data
            # TODO stop when downloading error
            # TODO check internet connection
            # TODO more than 75 items
            pure_data=$(wget "https://api.launchpad.net/1.0/~$ppa_user/+archive/ubuntu/$ppa_name?ws.op=getPublishedBinaries&distro_arch_series=https://api.launchpad.net/1.0/ubuntu/$ppa_serie/$ppa_architecture&status=$binary_status&exact_match=false&ordered=false&binary_name=" -q -O -)

            # get description of binaries
            description_binaries=$(echo "$pure_data" | 
                                   jq . | 
                                   grep display_name | 
                                   sed 's/ *"display_name"\: "//g' | 
                                   sed 's/",//g' |
                                   sed "s/^/$ppa_name /" )
    
            # get binary ids
            ids_binaries=$(echo "$pure_data" | 
                           jq . | 
                           grep self_link | 
                           sed 's/ *"self_link".*\///g' | 
                           sed 's/",//g' )
    
            # get url adresses
            adresses=""
            while IFS= read -r line; 
            do
                adresses="$adresses
https://api.launchpad.net/1.0/~$ppa_user/+archive/ubuntu/$ppa_name/+binarypub/$line?ws.op=getDownloadCount"
            done <<< "$ids_binaries"
            adresses=$(echo "$adresses" |
                       sed 1d)
            
            # Progressbar
            length_adresses=$(echo "$adresses" |
                              wc -l)
            progress_part2=$(($progress_part/$length_adresses))
            progress2=$progress
    
            # Get Download count
            download_count=""
            while IFS= read -r line;
            do
                # TODO stop when downloading error / one address fail
                count=$(wget $line -q -O -)
                download_count="$download_count
$count"
            # Progressbar
            progress2=$(($progress2+$progress_part2))
            echo $progress2
            
            done <<< "$adresses"
            download_count=$(echo "$download_count" | 
                             sed 1d )

            # merge data
            merged_data=$(paste \
                          <(echo "$description_binaries") \
                          <(echo "$download_count"))
            all_data="$all_data
$merged_data"
        done
    done
done

all_data=$(echo "$all_data" |
           sed 's/in //g' |
           tee $download_statistics )

# Progressbar
echo 100
}


config_window()
{
fkey=$(($RANDOM * $$))
yad --form \
    --plug="$fkey" \
    --tabnum=1 \
    --separator="" \
    --text="$(gettext 'Set one user name')" \
    --field="":CE"user" \
      "$ppa_user" > /tmp/pdc_ppa_user &

yad --list \
    --plug="$fkey" \
    --tabnum=2 \
    --editable \
    --no-headers \
    --print-all \
    --grid-lines=horizontal \
    --separator=" " \
    --text="$(gettext 'Set one or more PPAs')" \
    --column="" \
      ${all_ppas[*]} > /tmp/pdc_all_ppas &

yad --list \
    --plug="$fkey" \
    --tabnum=3 \
    --editable \
    --no-headers \
    --print-all \
    --grid-lines=horizontal \
    --separator=" " \
    --text="$(gettext 'Set one or more distros')" \
    --column="" \
      ${all_distros[*]} > /tmp/pdc_all_distros &

yad --list \
    --plug="$fkey" \
    --tabnum=4 \
    --editable \
    --no-headers \
    --print-all \
    --grid-lines=horizontal \
    --separator=" " \
    --text="$(gettext 'Set one or more architectures')" \
    --column="" \
      ${all_architectures[*]} > /tmp/pdc_all_architectures &

yad --list \
    --plug="$fkey" \
    --tabnum=5 \
    --radiolist \
    --no-headers \
    --no-selection \
    --hide-column=3 \
    --separator="" \
    --print-column=3 \
    --text="$(gettext 'Set one packages status. Now:') $(gettext $binary_status)" \
    --column="" \
    --column="" \
    --column="" \
      "" "$(gettext Pending)" "Pending" \
      "" "$(gettext Published)" "Published" \
      "" "$(gettext Superseded)" "Superseded" \
      "" "$(gettext Deleted)" "Deleted" \
      "" "$(gettext Obsolete)" "Obsolete" > /tmp/pdc_binary_status &

if yad --notebook \
       --key="$fkey" \
       --title="$title" \
       --window-icon=$icon \
       --tab="$(gettext User)" \
       --tab="$(gettext PPAs)" \
       --tab="$(gettext Distro)" \
       --tab="$(gettext Arch)" \
       --tab="$(gettext Status)" \
       --width=600 \
       --height=400
then
    ppa_user=$(cat /tmp/pdc_ppa_user)
    all_ppas=$(cat /tmp/pdc_all_ppas)
    all_distros=$(cat /tmp/pdc_all_distros)
    all_architectures=$(cat /tmp/pdc_all_architectures)
    binary_status_tmp=$(cat /tmp/pdc_binary_status)
    cfg_update settings ppa_user
    cfg_writer > $configfile
    cfg_update settings all_ppas
    cfg_writer > $configfile
    cfg_update settings all_distros
    cfg_writer > $configfile
    cfg_update settings all_architectures
    cfg_writer > $configfile
    if ! [[ "$binary_status_tmp" = "" ]]
    then
        binary_status=$binary_status_tmp
        cfg_update settings binary_status
        cfg_writer > $configfile
    fi
fi
}


set_config_file()
{
if test -e "$configfile"
then
    config_window
else
    cp "../share/ppa-download-counter/ppa-download-counter.ini" \
       "$HOME/.config/$package/"
    config_window
fi
}


check_config_file()
{
# Create config folder and statistics file
if ! test -e $download_statistics
then
                   mkdir $HOME/.config/$package
                   touch $download_statistics
fi
}


##############################################################################
#    PROGRAM
##############################################################################


#    PARAMETERS
##############################################################################

while [ $# -gt 0 ]
do
    case "$1" in
        --version | -v )
            echo "$title version $version"
            exit
            ;;

        --help | -h )
            echo "$title - "
            echo " "
            echo "usage: $title [option]"
            echo " "
            echo "options:"
            echo "  -h, --help                show this help"
            echo "  -v, --version             print version number"
            exit
            ;;            
    esac
    shift
done


##############################################################################


source "../share/ppa-download-counter/bash-ini-parser"

run=1

check_config_file

while [ "$run" = "1" ]
do
    cfg_parser "$configfile"
    cfg_section_settings
    # Needed for yad $all_data
    IFS=$ifs
    # TODO arch = unspecified dostro = unspecified
    all_data=$(awk '!a[$1$2$3$6]++' $download_statistics)
                            
    yad --list \
        --title="$title" \
        --window-icon=$icon \
        --no-selection \
        --button="$(gettext Close)":0 \
        --button="$(gettext Settings)":1 \
        --button="$(gettext Refresh)":2 \
        --width=600 \
        --height=400 \
        --column="PPA" \
        --column="$(gettext Package)" \
        --column="$(gettext Version)" \
        --column="$(gettext Release)" \
        --column="$(gettext Arch)" \
        --column="$(gettext Downloads)":NUM \
        $all_data

    status=$?
    case $status in
    252) exit ;;
    0) exit ;;
    1) set_config_file ;;
    2) get_total_downloads | 
       yad --progress \
           --title="$title" \
           --window-icon=$icon \
           --progress-text='' \
           --width=300 \
           --text "$(gettext 'Updating data...')" \
           --auto-close ;;
    esac
done
